# Step 1: Install Required Libraries (if needed)
!pip install yfinance pandas matplotlib scikit-learn tensorflow

# Step 2: Import Libraries
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from sklearn.metrics import mean_squared_error
import math

# Step 3: Load Stock Data
ticker = 'AAPL'  # You can change to any stock symbol
df = yf.download(ticker, start='2015-01-01', end='2023-12-31')
df = df[['Close']]
df.head()

# Step 4: Plot Closing Price
plt.figure(figsize=(10,5))
plt.title(f'{ticker} Closing Price History')
plt.plot(df['Close'])
plt.xlabel('Date')
plt.ylabel('Close Price USD ($)')
plt.grid()
plt.show()

# Step 5: Preprocessing
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df)

train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_size]
test_data = scaled_data[train_size - 60:]

# Step 6: Create Dataset with Timesteps
def create_dataset(data, time_step=60):
    X, y = [], []
    for i in range(time_step, len(data)):
        X.append(data[i - time_step:i, 0])
        y.append(data[i, 0])
    return np.array(X), np.array(y)

X_train, y_train = create_dataset(train_data)
X_test, y_test = create_dataset(test_data)

# Reshape for LSTM [samples, time steps, features]
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test  = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# Step 7: Build LSTM Model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(60, 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, batch_size=32, epochs=10)

# Step 8: Predictions
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)
y_test_inv = scaler.inverse_transform(y_test.reshape(-1,1))

# Step 9: Evaluate Model
rmse = math.sqrt(mean_squared_error(y_test_inv, predictions))
print(f'RMSE: {rmse}')

# Step 10: Plot Predictions
train = df[:train_size]
valid = df[train_size:]
valid['Predictions'] = predictions

plt.figure(figsize=(10,6))
plt.title('LSTM Model: Actual vs Predictions')
plt.xlabel('Date')
plt.ylabel('Price USD ($)')
plt.plot(train['Close'], label='Train Data')
plt.plot(valid[['Close']], label='Actual')
plt.plot(valid[['Predictions']], label='Predicted')
plt.legend()
plt.grid()
plt.show()
